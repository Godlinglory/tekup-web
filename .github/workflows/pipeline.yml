name: Deploy to Vercel

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  VERCEL_ORG_ID: ${{ secrets.TEAM_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.PROJECT_ID }}

jobs:
  CI:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      # Instead of npm run build, we use vercel build to generate .vercel/output
      - name: Build with Vercel
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      # Upload the build output as an artifact so CD can reuse it
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: vercel-output
          path: .vercel/output

  CD:
    needs: CI
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      # Download the prebuilt output from CI
      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: vercel-output
          path: .vercel/output
      ## We use vercel pull if we have stored 
      # - name: Pull Vercel Environment Information
      #   run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      # Deploy the prebuilt project
      - name: Deploy to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
